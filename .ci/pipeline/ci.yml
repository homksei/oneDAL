# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: DPCPP
  pool:
    vmImage: 'ubuntu-18.04'

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - script: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-oneapi-tbb-devel intel-oneapi-daal-devel intel-oneapi-dpcpp-compiler
        sudo apt-get install cmake

      displayName: 'apt-get'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-thread && cd build-static-thread
        cmake ..
      displayName: 'cmake static + thread configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-sequence && cd build-static-sequence
        cmake -DDAL_USE_PARALLEL=OFF ..
      displayName: 'cmake static + sequence configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-static-sequence
        make
        make install
      displayName: 'make static + sequence'

    - script: |
        cd workloads
        pip install -r requirements.txt
      displayName: 'pip install requirements'

    - script: |
        export DATASETSROOT=`pwd`
        cd workloads
        python load_datasets.py -d mnist
      displayName: 'download mnist'

- job: TRAD
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - script: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-oneapi-tbb-devel intel-oneapi-daal-devel
        sudo apt-get install gcc-multilib g++-multilib
        sudo apt-get install cmake

      displayName: 'apt-get'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-thread && cd build-static-thread
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF ..
      displayName: 'cmake static + thread configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-sequence && cd build-static-sequence
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF -DDAL_USE_PARALLEL=OFF ..
      displayName: 'cmake static + sequence configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-static-sequence
        make
        make install
      displayName: 'make static + sequence'

    - script: |
        cd workloads
        pip install -r requirements.txt
      displayName: 'pip install requirements'

    - script: |
        export DATASETSROOT=`pwd`
        cd workloads
        python load_datasets.py -d mnist
      displayName: 'download mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-static-sequence
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run Logreg benchmark on CPU for MNIST'
