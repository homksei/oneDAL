# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: 'ClangFormat'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - script: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main"
        sudo apt-get update && sudo apt-get install -y clang-format-9
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-9 100
      displayName: 'apt-get'
    - script: |
        .ci/scripts/clang-format.sh
      displayName: 'clang-format check'
      failOnStderr: true

- job: DPCPP
  pool:
    vmImage: 'ubuntu-18.04'

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - script: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install              \
            intel-oneapi-common-vars      \
            intel-oneapi-ccl              \
            intel-oneapi-common-licensing \
            intel-oneapi-tbb-devel        \
            intel-oneapi-daal-devel       \
            intel-oneapi-dpcpp-compiler   \
            intel-oneapi-dev-utilities    \
            intel-oneapi-libdpstd-devel   \
            cmake
        sudo bash -c 'echo libintelocl.so > /etc/OpenCL/vendors/intel-cpu.icd'
      displayName: 'apt-get'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-thread && cd build-static-thread
        cmake ..
      displayName: 'cmake static + thread configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-sequence && cd build-static-sequence
        cmake -DDAL_USE_PARALLEL=OFF ..
      displayName: 'cmake static + sequence configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-static-thread
        make
        make install
      displayName: 'make static + thread'

    - script: |
        cd workloads
        pip install -r requirements.txt
      displayName: 'pip install requirements'

    - script: |
        export DATASETSROOT=`pwd`
        cd workloads
        python load_datasets.py -d mnist
      displayName: 'download mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-static-thread
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run logreg benchmark (static + thread) on cpu for mnist'

- job: TRAD
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - script: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
        sudo apt-get update
        sudo apt-get install intel-oneapi-tbb-devel intel-oneapi-daal-devel
        sudo apt-get install gcc-multilib g++-multilib
        sudo apt-get install cmake
      displayName: 'apt-get'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-thread && cd build-static-thread
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF ..
      displayName: 'cmake static + thread configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-static-sequence && cd build-static-sequence
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF -DDAL_USE_PARALLEL=OFF ..
      displayName: 'cmake static + sequence configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-dynamic-thread && cd build-dynamic-thread
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF -DDAL_USE_STATIC=OFF ..
      displayName: 'cmake dynamic + thread configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        mkdir build-dynamic-sequence && cd build-dynamic-sequence
        cmake -DDAL_USE_DPCPP_INTERFACES=OFF -DDAL_USE_PARALLEL=OFF -DDAL_USE_STATIC=OFF ..
      displayName: 'cmake dynamic + sequence configurate'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-static-thread
        make
        make install
      displayName: 'make static + thread'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-static-sequence
        make
        make install
      displayName: 'make static + sequence'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-dynamic-thread
        make
        make install
      displayName: 'make dynamic + thread'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        cd build-dynamic-sequence
        make
        make install
      displayName: 'make dynamic + sequence'

    - script: |
        cd workloads
        pip install -r requirements.txt
      displayName: 'pip install requirements'

    - script: |
        export DATASETSROOT=`pwd`
        cd workloads
        python load_datasets.py -d mnist
      displayName: 'download mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-static-sequence
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run logreg benchmark (sequence + thread) on cpu for mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-static-thread
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run logreg benchmark (static + thread) on cpu for mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-dynamic-sequence
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run logreg benchmark (dynamic + sequence) on cpu for mnist'

    - script: |
        source /opt/intel/inteloneapi/setvars.sh
        export DATASETSROOT=`pwd`
        cd build-dynamic-thread
        ./Benchmark --benchmark_filter=Logreg.*Cpu.*float.*Mnist:60K/
      displayName: 'run logreg benchmark (dynamic + thread) on cpu for mnist'
